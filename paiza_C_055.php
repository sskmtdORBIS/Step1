C055:ログのフィルター
あなたはサーバ管理者です。 日々洪水のように流れるログを追っています。
とうとう自分の目と頭では処理しきれない量になってしまったため、プログラムを作って、重要な文字列を含むログだけ抽出する事にしました。

例えば、入力例 2 では、ログは上から順に "pizza"、 "paiza"、 "aizu"、 "ai"、 "sai" の 5 つです。
この 5 つのログに対して、重要な文字列 "ai" が含まれているのは "pizza" 以外の 4 つです。
結果として "pizza" だけが除かれ、 "paiza"、 "aizu"、 "ai"、 "sai" がこの順に抽出されます。

img

このように、ログと重要な文字列が与えられたとき、重要な文字列が含まれているログを抽出して出力するプログラムを作成してください。
重要な文字列が含まれていない場合は "None" と出力してください。

評価ポイント
10回のテストケースで、正答率、実行速度、メモリ消費量をはかり得点が決まります。
より早い回答時間で提出したほうが得点が高くなります。
複数のテストケースで正しい出力がされるか評価（+50点）
解答までの速さ評価（+50点）
入力される値
入力は以下のフォーマットで与えられます。

N
G
S_1
...
S_N
・1 行目には、文字列の数 N が整数で与えられます。
・2 行目には、抽出する対象の重要な文字列 G が与えられます。
・3 行目から続く N 行のうち i 行目 (1 ≦ i ≦ N)には、ログの内容である文字列 S_i が与えられます。
・入力は合計 N + 2 行であり、最終行の末尾に改行が 1 つ入ります。

それぞれの値は文字列で標準入力から渡されます。標準入力からの値取得方法はこちらをご確認ください
期待する出力
与えられたログに対して、上から順に重要な文字列が含まれているログを出力してください。
重要な文字列が含まれていない場合は "None" と出力してください。

出力の最後に改行を入れ、余計な文字、空行を含んではいけません。

条件
すべてのテストケースにおいて、以下の条件をみたします。

・1 ≦ N ≦ 100
・1 ≦ (G の長さ) ≦ 100
・G は半角英小文字のみで構成されている。
・各 i (1 ≦ i ≦ N) に対し
　・1 ≦ (S_i の長さ) ≦ 100
　・S_i は半角英小文字のみで構成されている。
入力例1
1
paiza
paizaonlinehackathon
出力例1
paizaonlinehackathon
入力例2
5
ai
pizza
paiza
aizu
ai
sai
出力例2
paiza
aizu
ai
sai
入力例3
3
warn
safe
normal
test
出力例3
None


<?php

//データ行数Nをfgetsで取得し、前後の空白改行をtrim関数で削除し、変数＄Nに代入する
$N = trim(fgets(STDIN));

//与えられたデータ2行目より、参照する文字列情報を$keyword変数に代入する（同じくtrimしておく）
$keyword = trim(fgets(STDIN));


//$result変数に結果を格納する空配列を代入する
$result = [];

//判定関数judgeを作る
function judge ($value){
    //global 変数を宣言する
    global $keyword;
    global $result;
    //$keyword変数を使い正規表現でパターンを探し一致した場合は$resultに$valueを代入する
    if(preg_match("/\w*$keyword\w*/",$value)){
        $result[] = $value;
    }
}

//判定をするため、$N回標準入力で値を取得した値を$valueとし、作成した判定関数judgeを実行する
for($i=0;$i<$N;$i++){
    judge(trim(fgets(STDIN)));
}

//$resultの配列に一つも値がない場合はNoneを返す
if(count($result)==0){
    echo "None",PHP_EOL;
//それ以外の場合は$resultの配列の値を改行を入れながら返す
} else {
    foreach($result as $value){
        echo $value,PHP_EOL;
    }
}

?>